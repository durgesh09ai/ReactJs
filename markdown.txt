const parseMarkdownTable = (text: string): { columns: string[]; rows: string[][] } | null => {
  const lines = text.trim().split("\n");

  // Find the table lines (basic check for "|")
  const tableStartIndex = lines.findIndex(line => line.trim().startsWith("|") && line.includes("|"));
  if (tableStartIndex === -1 || tableStartIndex + 2 >= lines.length) return null;

  const headerLine = lines[tableStartIndex];
  const separatorLine = lines[tableStartIndex + 1];

  // Basic validation for table separator line
  if (!separatorLine.includes("---")) return null;

  const columnNames = headerLine.split("|").map(col => col.trim()).filter(Boolean);

  const rows: string[][] = [];

  for (let i = tableStartIndex + 2; i < lines.length; i++) {
    if (!lines[i].includes("|")) break;
    const row = lines[i].split("|").map(cell => cell.trim()).filter(Boolean);
    if (row.length > 0) rows.push(row);
  }

  return { columns: columnNames, rows };
};


-------------

import { jsPDF } from "jspdf";
import autoTable from "jspdf-autotable";

const generatePDFWithParsedTable = (description: string) => {
  const doc = new jsPDF();
  const parsed = parseMarkdownTable(description);

  doc.text("LLM Response", 14, 10);

  if (parsed) {
    autoTable(doc, {
      startY: 20,
      head: [parsed.columns],
      body: parsed.rows,
    });
  } else {
    doc.text("No table detected or table is invalid.", 14, 30);
  }

  doc.save("llm-response.pdf");
};


---------------------------------------------------------------------------------------

// Helper to extract markdown table from string
const extractTableParts = (text: string) => {
  const tableRegex = /(\|.*\|\n(?:\|.*\|\n?)+)/; // matches markdown tables
  const match = text.match(tableRegex);

  if (!match) return { before: text, table: null, after: "" };

  const table = match[1];
  const [before, after] = text.split(table);

  return { before, table, after };
};

// Parse markdown table to columns/rows
const parseMarkdownTable = (tableText: string) => {
  const lines = tableText.trim().split("\n");
  const header = lines[0].split("|").map((cell) => cell.trim()).filter(Boolean);
  const rows = lines.slice(2).map((line) =>
    line.split("|").map((cell) => cell.trim()).filter(Boolean)
  );
  return { columns: header, rows };
};

// Main function
const generatePDFt = (description: string) => {
  const doc = new jsPDF();
  let currentY = 10;

  const { before, table, after } = extractTableParts(description);

  // Render text before table
  if (before) {
    const lines = doc.splitTextToSize(before.trim(), 180);
    doc.text(lines, 14, currentY);
    currentY += lines.length * 6 + 4;
  }

  // Render table if exists
  if (table) {
    const parsed = parseMarkdownTable(table);

    autoTable(doc, {
      startY: currentY,
      head: [parsed.columns],
      body: parsed.rows,
      headStyles: {
        fillColor: [40, 40, 40],
        textColor: [255, 255, 255],
        fontStyle: 'bold',
      },
      styles: { fontSize: 10 },
      margin: { left: 14, right: 14 },
      didDrawPage: (data) => {
        currentY = data.cursor.y + 10; // update current Y after table
      },
    });
  }

  // Render text after table
  if (after) {
    const lines = doc.splitTextToSize(after.trim(), 180);
    doc.text(lines, 14, currentY);
  }



-------------------------------
import React, { useState } from "react";
import {
  Box,
  Paper,
  TextField,
  Typography,
  Chip,
  Button
} from "@mui/material";
import { styled } from "@mui/material/styles";
import InsertDriveFileIcon from '@mui/icons-material/InsertDriveFile'; // Import document icon

interface DocsUrl {
  id: string;
  label: string;
}

interface TagSelectorProps {
  selectedDocsUrl: DocsUrl[];
  onDocUrlSelect: (docsUrl: DocsUrl) => void;
  onDocUrlRemove: (docUrlId: string) => void;
}

const StyledChip = styled(Chip)(({ theme }) => ({
  backgroundColor: 'rgba(243,250,255,1)',
  borderRadius: '16px',
  '& .MuiChip-deleteIcon': {
    color: 'rgba(15,73,119,1)',
  }
}));

export const AddUrlSection: React.FC<TagSelectorProps> = ({
  selectedDocsUrl,
  onDocUrlSelect,
  onDocUrlRemove,
}) => {
  const [searchQuery, setSearchQuery] = useState<string>("");
  const [showForm, setShowForm] = useState<boolean>(false); // State to control form visibility

  // Toggle visibility of the form when the button is clicked
  const handleAddUrlClick = () => {
    setShowForm((prevState) => !prevState); // Toggle visibility
  };

  return (
    <Paper
      elevation={0}
      sx={{
        border: 1,
        borderColor: 'rgba(15,73,119,0.1)',
        borderRadius: 2,
        minWidth: '240px',
        minHeight: '502px',
        flexGrow: 1,
        display: 'flex',
        flexDirection: 'column',
      }}
    >
      <Box
        sx={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          p: 1,
          borderBottom: 2,
          borderColor: '#0c3b61',
        }}
      >
        <Typography variant="body2" sx={{ fontWeight: 500 }}>
          Reference Document URLs
        </Typography>
        <Button
          variant="contained"
          size="small"
          sx={{
            backgroundColor: "#0F4977",
            borderRadius: "8px",
            color: "#fff",
            textTransform: "none",
            fontSize: "0.75rem",
            padding: "4px 12px",
            minWidth: "unset", // optional: to reduce button width
            "&:hover": {
              backgroundColor: "#0c3b61",
            },
          }}
          onClick={handleAddUrlClick} // Show/Hide form
        >
          +
        </Button>
      </Box>

      {/* Conditionally render the form based on showForm state */}
      {showForm && (
        <Box sx={{ display: 'flex', flexDirection: 'column', flexGrow: 1 }}>
          <Typography variant="body2" gutterBottom>
            Add Document Url:
          </Typography>
          <TextField
            placeholder="Add Document Url"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            size="small"
            fullWidth
          />
        </Box>
      )}

<Box sx={{ display: 'flex', flexDirection: 'column', gap: 1, p: 2, alignItems: 'flex-start' }}>
        <Typography variant="body2" sx={{ fontWeight: 500,fontSize:'12px' }}>
          Selected Documents
        </Typography>
        {selectedDocsUrl.map((docUrl) => (
          <StyledChip
            key={docUrl.id}
            sx={{fontSize: 12,color: '#0c3b61' }}
            label={
              <>
                <InsertDriveFileIcon sx={{ fontSize: 16, marginRight: 1, color: '#0c3b61' }} /> {/* Document Icon with specific color */}
                {docUrl.label}
              </>
            }
            onDelete={() => onDocUrlRemove(docUrl.id)}
            size="small"
          />
        ))}
      </Box>
    </Paper>
  );
};

_______________________________


import React, { useState } from "react";
import {
  Box,
  Typography,
  IconButton,
  List,
  ListItem,
  ListItemText,
  Collapse,
  Avatar,
  Paper,
} from "@mui/material";
import AddIcon from "@mui/icons-material/Add";
import RemoveIcon from "@mui/icons-material/Remove";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";

const Sidebar = () => {
  const navLinks = ["Home", "Discover", "Create workspace"];

  const [expandWorkspace, setExpandWorkspace] = useState(true);
  const [expandResearch, setExpandResearch] = useState(true);
  const [expandExperiment, setExpandExperiment] = useState(true);

  return (
    <Box
      display="flex"
      flexDirection="column"
      height="100vh"
      px={2}
      py={1}
      fontFamily="Montserrat, sans-serif"
      fontSize="14px"
      bgcolor="#fff"
      maxWidth="300px"
      width="100%"
      boxShadow="1px 0 4px rgba(0,0,0,0.1)"
    >
      {/* Header */}
      <Box
        display="flex"
        alignItems="center"
        justifyContent="space-between"
        px={1}
        py={1}
        borderBottom="1px solid rgba(0,0,0,0.1)"
      >
        <Typography
          variant="h6"
          sx={{ fontSize: "28px", fontWeight: 600, color: "#0F4977" }}
        >
          EXL
        </Typography>
        <Avatar
          src="https://cdn.builder.io/api/v1/image/assets/b22a1f591db946d8a5b6fadc33b7c231/9df66a2e096fffaa4eec49ff70db980f5326516a?placeholderIfAbsent=true"
          alt="Logo"
          sx={{ width: 24, height: 24 }}
          variant="square"
        />
      </Box>

      {/* Nav Section */}
      <Box mt={2}>
        <List disablePadding>
          {navLinks.map((label, i) => (
            <ListItem key={i} disablePadding>
              <ListItemText
                primary={label}
                primaryTypographyProps={{
                  fontSize: "14px",
                  color: "#343434",
                  px: 1,
                  py: 1,
                }}
              />
            </ListItem>
          ))}
        </List>
      </Box>

      {/* Workspace Card */}
      <Paper
        elevation={0}
        sx={{
          bgcolor: "#F3FAFF",
          p: 1,
          borderRadius: 2,
        }}
      >

<Box
    sx={{
      backgroundColor: expandWorkspace ? "#ffffff" : "#F3FAFF", // dynamic background
      borderRadius: 2,
      p: 1,
      transition: "background-color 0.2s ease"
    }}
  >

        {/* Workspace Header (Collapsible) */}
        <Box
    display="flex"
    justifyContent="space-between"
    alignItems="center"
    onClick={() => setExpandWorkspace(!expandWorkspace)}
    sx={{ cursor: "pointer", py: 0.5 }}
  >
    <Typography fontSize="14px" fontWeight={600} color="#343434">
      Diabetes - WB 1
    </Typography>
    <IconButton size="small">
      <ExpandMoreIcon
        fontSize="small"
        sx={{
          transform: expandWorkspace ? "rotate(180deg)" : "rotate(0deg)",
          transition: "0.2s",
        }}
      />
    </IconButton>
  </Box>

        <Collapse in={expandWorkspace}>
          {/* Research Section */}
          <Box>
            <Box
              display="flex"
              justifyContent="space-between"
              alignItems="center"
              onClick={() => setExpandResearch(!expandResearch)}
              sx={{ cursor: "pointer", py: 0.5 }}
            >
              <Typography fontSize="14px" fontWeight={500} color="#0F4977">
                Research
              </Typography>
              <IconButton size="small">
                {expandResearch ? (
                  <RemoveIcon fontSize="small" />
                ) : (
<IconButton
  size="small"
  sx={{
    backgroundColor: '#D9EDFF',
    color: '#000',
    borderRadius: '4px',
    width: 24,
    height: 24,
    '&:hover': {
      backgroundColor: '#D9EDFF'
    }
  }}
>
  <AddIcon fontSize="small" />
</IconButton>                )}
              </IconButton>
            </Box>
            <Collapse in={expandResearch}>
              <List dense disablePadding>
                <ListItem sx={{ pl: 3 }}>
                  <ListItemText
                    primary="Diabetes Type 1"
                    primaryTypographyProps={{ fontSize: "13px" }}
                  />
                </ListItem>
                <ListItem sx={{ pl: 3 }}>
                  <ListItemText
                    primary="Diabetes Type 2"
                    primaryTypographyProps={{ fontSize: "13px" }}
                  />
                </ListItem>
              </List>
            </Collapse>
          </Box>

          {/* Experiment Section */}
          <Box mt={1}>
            <Box
              display="flex"
              justifyContent="space-between"
              alignItems="center"
              onClick={() => setExpandExperiment(!expandExperiment)}
              sx={{ cursor: "pointer", py: 0.5 }}
            >
              <Typography fontSize="14px" fontWeight={500} color="#0F4977">
                Experiment
              </Typography>
              <IconButton size="small">
                {expandExperiment ? (
                  <RemoveIcon fontSize="small" />
                ) : (
<IconButton
  size="small"
  sx={{
    backgroundColor: '#D9EDFF',
    color: '#000',
    borderRadius: '4px',
    width: 24,
    height: 24,
    '&:hover': {
      backgroundColor: '#D9EDFF'
    }
  }}
>
  <AddIcon fontSize="small" />
</IconButton>                )}
              </IconButton>
            </Box>
            <Collapse in={expandExperiment}>
              <List dense disablePadding>
                <ListItem sx={{ pl: 3 }}>
                  <ListItemText
                    primary="Configuration 2"
                    primaryTypographyProps={{ fontSize: "13px" }}
                  />
                </ListItem>
                <ListItem sx={{ pl: 3 }}>
                  <ListItemText
                    primary="Configuration 3"
                    primaryTypographyProps={{ fontSize: "13px" }}
                  />
                </ListItem>
              </List>
            </Collapse>
          </Box>
        </Collapse>
        </Box>
      </Paper>
    </Box>
  );
};

export default Sidebar;

-------------------------------------------------------------

# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
 
resources: 
  repositories:
    - repository: protoweave_db_accelerator_frt
      type: git
      name: HCTitan/protoweave_db_accelerator_frt
      ref: 'refs/heads/main'
      trigger:
      - main
 
 
pool:
  vmImage: ubuntu-latest
steps:
- checkout: protoweave_db_accelerator_frt
- task: Npm@1
  inputs:
    command: 'install'
- script: npm run build
  displayName: 'Build React Js Application'
- task: CopyFiles@2
  inputs:
    Contents: 'build/**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true
 
# Deploy to Azure App Service
- task: AzureWebApp@1
  displayName: 'Deploy to protoweave-db-accelerator App Service'
  inputs:
    azureSubscription: 'XXXXX'
    appType: 'webApp'
    appName: 'protoweave-db-accelerator'
    package: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'





