import React, { useState } from "react";
import {
  Box,
  Paper,
  Tabs,
  Tab,
  TextField,
  Typography,
  Chip,
  List,
  ListItem,
  ListItemText,
  ListItemIcon,
  Checkbox,
  ListItemButton,
  InputAdornment,
} from "@mui/material";
import { styled } from "@mui/material/styles";
import SearchIcon from "@mui/icons-material/Search";

interface Category {
  id: string;
  label: string;
}

const StyledChip = styled(Chip)(() => ({
  backgroundColor: "rgba(243,250,255,1)",
  borderRadius: "16px",
  "& .MuiChip-deleteIcon": {
    color: "rgba(15,73,119,1)",
  },
}));

export const TagSelector: React.FC = () => {
  const [activeTab, setActiveTab] = useState<"IMU" | "SGU">("IMU");
  const [searchQuery, setSearchQuery] = useState<string>("");

  // Separate states
  const [imuTags, setImuTags] = useState<Record<string, string>>({});
  const [sguTags, setSguTags] = useState<Record<string, string>>({});

  const imuCategories: Category[] = [
    { id: "imu-1", label: "Insurance" },
    { id: "imu-2", label: "Banking" },
    { id: "imu-3", label: "Retail" },
  ];

  const sguCategories: Category[] = [
    { id: "sgu-1", label: "North America" },
    { id: "sgu-2", label: "Europe" },
    { id: "sgu-3", label: "Asia Pacific" },
  ];

  const currentCategories = activeTab === "IMU" ? imuCategories : sguCategories;

  const filteredCategories = currentCategories.filter((category) =>
    category.label.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const handleToggle = (category: Category) => {
    if (activeTab === "IMU") {
      setImuTags((prev) => {
        const newTags = { ...prev };
        if (newTags[category.id]) {
          delete newTags[category.id];
        } else {
          newTags[category.id] = category.label;
        }
        return newTags;
      });
    } else {
      setSguTags((prev) => {
        const newTags = { ...prev };
        if (newTags[category.id]) {
          delete newTags[category.id];
        } else {
          newTags[category.id] = category.label;
        }
        return newTags;
      });
    }
  };

  const handleDelete = (tab: "IMU" | "SGU", id: string) => {
    if (tab === "IMU") {
      setImuTags((prev) => {
        const newTags = { ...prev };
        delete newTags[id];
        return newTags;
      });
    } else {
      setSguTags((prev) => {
        const newTags = { ...prev };
        delete newTags[id];
        return newTags;
      });
    }
  };

  return (
    <Paper
      elevation={0}
      sx={{
        border: 1,
        borderColor: "rgba(15,73,119,0.1)",
        borderRadius: 2,
        minWidth: "240px",
        minHeight: "502px",
        flexGrow: 1,
        display: "flex",
        flexDirection: "column",
      }}
    >
      <Box sx={{ width: "100%", borderBottom: 1, borderColor: "divider" }}>
        <Tabs
          value={activeTab}
          onChange={(_, newValue) => setActiveTab(newValue)}
        >
          <Tab label="IMU" value="IMU" sx={{ fontSize: "0.75rem" }} />
          <Tab label="SGU" value="SGU" sx={{ fontSize: "0.75rem" }} />
        </Tabs>
      </Box>

      <Box sx={{ p: 2, display: "flex", flexDirection: "column", flexGrow: 1 }}>
        <TextField
          placeholder="Search tags"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          size="small"
          fullWidth
          InputProps={{
            endAdornment: (
              <InputAdornment position="end">
                <SearchIcon />
              </InputAdornment>
            ),
          }}
          sx={{ mb: 2 }}
        />

        <Typography variant="caption" color="text.secondary" sx={{ mb: 1 }}>
          Selected tags
        </Typography>

        <Box sx={{ display: "flex", flexWrap: "wrap", gap: 1, mb: 2 }}>
          {Object.entries(imuTags).map(([id, label]) => (
            <StyledChip
              key={`imu-${id}`}
              label={`${label} (IMU)`}
              onDelete={() => handleDelete("IMU", id)}
              size="small"
            />
          ))}
          {Object.entries(sguTags).map(([id, label]) => (
            <StyledChip
              key={`sgu-${id}`}
              label={`${label} (SGU)`}
              onDelete={() => handleDelete("SGU", id)}
              size="small"
            />
          ))}
        </Box>

        <Typography variant="caption" color="text.secondary" sx={{ mb: 1 }}>
          Choose {activeTab}
        </Typography>

        <List sx={{ flexGrow: 1, overflow: "auto" }}>
          {filteredCategories.map((category) => {
            const isChecked =
              activeTab === "IMU"
                ? !!imuTags[category.id]
                : !!sguTags[category.id];
            return (
              <ListItem disablePadding key={category.id}>
                <ListItemButton
                  onClick={() => handleToggle(category)}
                  sx={{ py: 0.5 }}
                >
                  <ListItemIcon sx={{ minWidth: "auto", mr: 1 }}>
                    <Checkbox checked={isChecked} size="small" />
                  </ListItemIcon>
                  <ListItemText
                    primary={category.label}
                    primaryTypographyProps={{ variant: "body2" }}
                  />
                </ListItemButton>
              </ListItem>
            );
          })}
        </List>
      </Box>
    </Paper>
  );
};
