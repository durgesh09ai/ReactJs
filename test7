versionOptions: { key: string; value: string }[] = [];
async fetchVersionOptions() {
  try {
    const response = await fetch(`${this.apiUrl}/your-version-endpoint`); // replace with your real endpoint
    const data = await response.json();

    if (Array.isArray(data) && data.length > 0 && typeof data[0] === "object") {
      const parsed = Object.entries(data[0]).map(([key, value]) => ({
        key,
        value,
      }));

      runInAction(() => {
        this.versionOptions = parsed;
      });
    }
  } catch (error) {
    console.error("Error fetching version options:", error);
  }
}


-----------------------

useEffect(() => {
  if (researchStore.versionOptions.length > 0) {
    setVersion(researchStore.versionOptions[0].value);
  } else {
    setVersion(fallbackVersion.value);
  }
}, [researchStore.versionOptions]);


______________________________

<FormControl fullWidth size="small">
  <Select
    value={version}
    onChange={(e) => setVersion(e.target.value)}
  >
    {researchStore.versionOptions.length > 0
      ? researchStore.versionOptions.map((option) => (
          <MenuItem key={option.key} value={option.value}>
            {option.key}
          </MenuItem>
        ))
      : (
        <MenuItem key={fallbackVersion.key} value={fallbackVersion.value}>
          {fallbackVersion.key}
        </MenuItem>
      )
    }
  </Select>
</FormControl>

