interface LoginFormProps {
    onSubmit: (email: string, password: string) => void;
}
interface LoginFormProps {
onSubmit(email: string, password: string) : void;
}


Store : place where all the state of the application are stored.
Reducers : It is an object  just like as Controller which controll the action of the application , it is pure function , Action like, Add, Delete, Update . It is an object which having Key: Value things, Each key act as Action
UseSelector  :  This is the hook which is use to communicate with the Store, It selectively ask the store that I need that infornmation.
UseDispatch : THis hook is basically use to update Spacific things in the Store along with the reducer
const App: React.FC = () => { ... } 

: React.FC
This is TypeScript type annotation. Here, React.FC stands for "React Function Component." By annotating App with React.FC, you're telling TypeScript that App is a functional component in React.

React.FC (or React.FunctionComponent) is a built-in type in React's type definitions that represents a functional component. It automatically includes type checking for children, default props, prop types, and return type.


Cmd +shift  + p =  Reload application

Padding is used to create space inside an element, between the element's content and its border. 	
<style>
        .box {
            padding: 20px;
            background-color: lightgoldenrodyellow;
            border: 1px solid #000;
        }
media queries to apply different padding based on the screen size 
        @media (max-width: 600px) {
            .box {
                padding: 10px; /* Smaller padding for smaller screens */
            }
        }
    </style>

The .box class initially has padding: 20px;.
When the viewport width is 600 pixels or less, the padding is reduced to 10px using a media query (@media (max-width: 600px)).


Margins in CSS are used to create space around elements, outside of any defined borders.
This margin creates space outside the div, separating it from other elements.
One common use of margin is to center an element horizontally. This can be done by setting the left and right margins to auto.

margin: 0 auto; sets the top and bottom margins to 0, and the left and right margins to auto, which centers the element horizontally within its parent.
--------------------------------------------------------------------------------

The <Router> component is a fundamental part of client-side routing in React applications. 
It is provided by routing libraries like React Router and is used to define the routing configuration for your application.


 <Router>
            <div>

                <Routes>
                <Route path="/" element={<Layout />}>
                    <Route path="/user-dashboard" element=<UserDashboard /> : <Navigate to="/login" />/>
                </Route>
                </Routes>
            </div>
        </Router>

-------------------------------------------------------------------

e: React.FormEvent : React.FormEvent is used to type form-related event handlers in React components.
------------------------------------------------------------
The e.preventDefault() method is used to prevent the default behavior of an event in JavaScript. When used in a React application,
it stops the default action associated with an event from being executed. 
-------------------------------------------------------
createSlice() is a function provided by Redux Toolkit that simplifies the process of creating Redux slices. 
A "slice" refers to a portion of the Redux state and the logic for handling actions and reducers related to that portion of the state. 
createSlice() combines the functionality of createReducer and createAction into a single API,
making it easier to write and maintain Redux logic.

Key Features of createSlice()
State Definition: You define the initial state for the slice.
Reducers: You define a set of reducer functions that handle specific actions.
Action Creators: It automatically generates action creators based on the reducer functions.
----------------------------------------------------------------

Explanation
Initial State: The initial state of the authentication slice is defined with role and errorMessage.
Reducers: The login, logout, and setError reducers are defined to handle state changes. login sets the role and clears any error message,
logout clears the role and error message, and setError sets an error message.
Actions: createSlice() automatically generates action creators for each reducer function. These actions can be dispatched to update the state.
Store Configuration: The slice reducer is added to the Redux store.
Component Usage: The React component uses useSelector to access the Redux state and useDispatch to dispatch actions. The form handles submission, 
checking credentials, and dispatching appropriate actions.
Using createSlice() from Redux Toolkit simplifies the process of managing Redux state by combining the reducer logic and action creators in a concise and
readable way.
---------------------------------------------------------
package.json
 It contains metadata relevant to the project.It specifies the project dependencies and their respective versions or version ranges.
package-lock.json
It Locks down the full dependency tree to exact versions, ensuring consistent installations.
Ensures that the exact same versions of dependencies are installed on every installation.
--------------------------------------------------------------
Jest : TO test the Component
npm install --save-dev @testing-library/react @testing-library/jest-dom @testing-library/user-event jest

-------------------------------------
In React, promises are a fundamental part of handling asynchronous operations, such as fetching data from a server, performing computations,
or interacting with external APIs.
Promises provide a way to handle asynchronous tasks and manage their results or errors.

Promise States: A promise can be in one of three states:

Pending: Initial state, neither fulfilled nor rejected.
Fulfilled: The operation completed successfully.
Rejected: The operation failed with an error.

Handling Promise Results: You can handle the result of a promise using the .then() method,
which takes two optional callbacks: 
one for success (fulfilled) and one for failure (rejected):

myPromise.then(
  (result) => {
    console.log(result); // Data fetched successfully
  },
  (error) => {
    console.error(error); // Error fetching data
  }
);
Using Promises in React:
import React, { useState, useEffect } from 'react';

const MyComponent = () => {
  const [data, setData] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('https://api.example.com/data');
        if (!response.ok) {
          throw new Error('Failed to fetch data');
        }
        const jsonData = await response.json();
        setData(jsonData);
      } catch (error) {
        setError(error.message);
      }
    };

    fetchData();
  }, []);

  return (
    <div>
      {data && <p>Data: {JSON.stringify(data)}</p>}
      {error && <p>Error: {error}</p>}
    </div>
  );
};

export default MyComponent;

--------------------------------------------
async and await : 
are features introduced in JavaScript to simplify asynchronous code and make it look more synchronous and easier to understand.
They provide a way to work with promises in a more concise and intuitive manner.

async Function Declaration: When you declare a function with the async keyword, it means the function will always return a promise. Inside an async function,
you can use the await keyword to pause the execution of the function until a promise is settled (resolved or rejected).

async function fetchData() {
    try {
        const response = await fetch('https://api.example.com/data');
        const data = await response.json();
        return data; // Returns the fetched data if the promise resolves
    } catch (error) {
        console.error('Error fetching data:', error); // Handles errors if the promise is rejected
    }
}
The combination of async and await allows you to write asynchronous code ;
---------------------------------------------------------------------------------
Callback function : A callback function in JavaScript is a function that is passed as an argument to another function and 
is executed later in the program's execution. Callback functions are commonly used in asynchronous programming,
event handling, and functional programming paradigms.

Example : 
function doSomething(callback) {
    // Perform some operation
    console.log("Doing something...");
    
    // Call the callback function
    callback();
}

function callbackFunction() {
    console.log("Callback function executed!");
}

// Pass the callback function to doSomething
doSomething(callbackFunction);


Common Use Cases:
Asynchronous Programming: Callback functions are often used to handle asynchronous operations, such as fetching data from a server, reading a file,
or waiting for user input. Instead of blocking the execution of the program,
asynchronous operations accept callback functions to be executed once the operation completes.

Event Handling: In web development, callback functions are commonly used to handle events triggered by user actions,
such as clicks, mouse movements, or keyboard input. Event listeners are set up to call callback functions when the corresponding event occurs.

Callback Hell:
Callback hell, also known as "pyramid of doom," refers to the situation in asynchronous JavaScript programming where multiple nested callback functions are used,
leading to code that is difficult to read, understand, and maintain.
This can be mitigated by using techniques like modularization, promises, or async/await to write more readable and structured code.


