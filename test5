import { makeAutoObservable, runInAction } from "mobx";

class DatabricksStore {
  databricksData = {
    serviceCredential: "",
    databrickurl: "",
    catalogname: "",
    schemaname: "",
  };

  loading = false;
  error: string | null = null;

  constructor() {
    makeAutoObservable(this);
  }

  async fetchData() {
    this.loading = true;
    try {
      const res = await fetch("/api/databricks"); // Replace with real API
      const data = await res.json();
      runInAction(() => {
        this.databricksData = data;
        this.loading = false;
      });
    } catch (err: any) {
      runInAction(() => {
        this.error = err.message || "Failed to fetch data";
        this.loading = false;
      });
    }
  }

  async updateData(updatedData: typeof this.databricksData) {
    try {
      const res = await fetch("/api/databricks", {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(updatedData),
      });
      if (!res.ok) throw new Error("Failed to update data");

      runInAction(() => {
        this.databricksData = updatedData;
      });
    } catch (err: any) {
      this.error = err.message;
    }
  }
}

const databricksStore = new DatabricksStore();
export default databricksStore;
_______________________________________________________

import React, { useEffect, useState } from "react";
import { observer } from "mobx-react-lite";
import { Box, Button, Paper, Typography, Link, CircularProgress } from "@mui/material";
import SetupHeader from "./SetupHeader";
import SetupFormField from "./SetupFormField";
import databricksStore from "../stores/DatabricksStore"; // MobX store

const DatabricksSchemaSetup: React.FC = () => {
  const { databricksData, fetchData, updateData, loading } = databricksStore;

  const [editedData, setEditedData] = useState(databricksData);
  const [isEditing, setIsEditing] = useState(false);

  useEffect(() => {
    fetchData(); // Fetch once on mount
  }, []);

  useEffect(() => {
    setEditedData(databricksData); // Sync store data to form state
  }, [databricksData]);

  const handleEditClick = () => setIsEditing(true);
  const handleCancel = () => {
    setEditedData(databricksData);
    setIsEditing(false);
  };

  const handleUpdate = async () => {
    await updateData(editedData);
    setIsEditing(false);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setEditedData(prev => ({ ...prev, [name]: value }));
  };

  if (loading) return <CircularProgress />;

  return (
    <Paper elevation={1} sx={{ maxWidth: "820px", pb: 2, px: 1, borderRadius: 2 }}>
      <SetupHeader title="Databricks Schema Setup" />

      <Box sx={{ display: "flex", justifyContent: "space-between", alignItems: "center", mt: 1, mb: 2, px: 1, width: 450 }}>
        <Typography variant="h6" sx={{ fontSize: 14, fontWeight: "bold" }}>
          Databricks Schema Setup
        </Typography>

        {!isEditing && (
          <Link component="button" onClick={handleEditClick} underline="hover" sx={{ fontSize: 14, fontWeight: "bold" }}>
            Edit
          </Link>
        )}
      </Box>

      <Box sx={{ display: "flex", width: "100%", gap: 4, flexWrap: "wrap", alignItems: "stretch", px: 1 }}>
        <Box sx={{ display: "flex", flexDirection: "column", minWidth: 300, width: "400px" }}>
          <SetupFormField
            label="Service Credentials (API Key)"
            value={editedData.serviceCredential}
            name="serviceCredential"
            onChange={handleChange}
            readOnly={!isEditing}
            type="password"
          />
          <SetupFormField
            label="Databricks URL"
            value={editedData.databrickurl}
            name="databrickurl"
            onChange={handleChange}
            readOnly={!isEditing}
          />
          <SetupFormField
            label="Catalog Name"
            value={editedData.catalogname}
            name="catalogname"
            onChange={handleChange}
            readOnly={!isEditing}
          />
          <SetupFormField
            label="Schema Name"
            value={editedData.schemaname}
            name="schemaname"
            onChange={handleChange}
            readOnly={!isEditing}
          />

          {isEditing && (
            <Box sx={{ display: "flex", gap: 2, mt: 2 }}>
              <Button variant="contained" onClick={handleUpdate}>Update</Button>
              <Button variant="outlined" onClick={handleCancel}>Cancel</Button>
            </Box>
          )}
        </Box>
      </Box>
    </Paper>
  );
};

export default observer(DatabricksSchemaSetup);
