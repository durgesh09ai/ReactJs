import React, { useState } from "react";
import {
  Box,
  Typography,
  Button,
  TextField,
  Paper,
  IconButton
} from "@mui/material";
import AddIcon from "@mui/icons-material/Add";
import EditIcon from "@mui/icons-material/Edit";
import SaveIcon from "@mui/icons-material/Save";

export interface CodeEntry {
  Diagnosis: string;
  Codes: string;
  "Code Type": string;
}

interface DiagnosisParametersSectionProps {
  code_table: CodeEntry[];
}

const ParametersSection: React.FC<DiagnosisParametersSectionProps> = ({
  code_table
}) => {
  const [entries, setEntries] = useState<CodeEntry[]>(code_table);
  const [editingIndex, setEditingIndex] = useState<number | null>(null);
  const [editedEntry, setEditedEntry] = useState<CodeEntry>({
    Diagnosis: "",
    Codes: "",
    "Code Type": ""
  });

  const [isAdding, setIsAdding] = useState(false);
  const [newEntry, setNewEntry] = useState<CodeEntry>({
    Diagnosis: "",
    Codes: "",
    "Code Type": ""
  });

  // Global date states
  const [startDate, setStartDate] = useState<string>("");
  const [endDate, setEndDate] = useState<string>("");

  const handleEditClick = (index: number) => {
    setEditingIndex(index);
    setEditedEntry(entries[index]);
  };

  const handleSaveClick = (index: number) => {
    const updated = [...entries];
    updated[index] = editedEntry;
    setEntries(updated);
    setEditingIndex(null);
  };

  const handleChange = (field: keyof CodeEntry, value: string) => {
    setEditedEntry((prev) => ({
      ...prev,
      [field]: value
    }));
  };

  const handleAddChange = (field: keyof CodeEntry, value: string) => {
    setNewEntry((prev) => ({
      ...prev,
      [field]: value
    }));
  };

  const handleAddSave = () => {
    const { Diagnosis, Codes, "Code Type": codeType } = newEntry;
    if (Diagnosis && Codes && codeType && startDate && endDate) {
      setEntries([...entries, newEntry]);
      setNewEntry({ Diagnosis: "", Codes: "", "Code Type": "" });
      setIsAdding(false);
    }
  };

  return (
    <Box sx={{ width: "100%" }}>
      <Box
        sx={{
          display: "flex",
          justifyContent: "space-between",
          alignItems: "center",
          flexWrap: "wrap",
          gap: { xs: 2, md: 3 }
        }}
      >
        <Typography
          sx={{
            fontWeight: "bold",
            fontSize: 14,
            color: "black",
            lineHeight: 1.2
          }}
        >
          Diagnosis Code Table
        </Typography>

        <Button
          variant="outlined"
          startIcon={<AddIcon />}
          onClick={() => setIsAdding(true)}
          sx={{
            borderColor: "#0F4977",
            color: "black",
            textTransform: "none",
            bgcolor: "white",
            minHeight: 32,
            "&:hover": {
              bgcolor: "#f0f7ff",
              borderColor: "#0F4977"
            }
          }}
        >
          Add Parameters
        </Button>
      </Box>

      {/* Global Date Fields */}
      <Box
        sx={{
          mt: 2,
          display: "flex",
          flexDirection: "row",
          gap: 2,
          flexWrap: "wrap"
        }}
      >
        <TextField
          type="date"
          label="Start Date"
          value={startDate}
          onChange={(e) => setStartDate(e.target.value)}
          InputLabelProps={{ shrink: true }}
          size="small"
          required
        />
        <TextField
          type="date"
          label="End Date"
          value={endDate}
          onChange={(e) => setEndDate(e.target.value)}
          InputLabelProps={{ shrink: true }}
          size="small"
          required
        />
      </Box>

      <Box sx={{ mt: 2 }}>
        {isAdding && (
          <Paper
            variant="outlined"
            sx={{
              p: 1.5,
              mb: 2,
              borderRadius: 1,
              bgcolor: "white"
            }}
          >
            <Typography fontWeight="medium" mb={1}>
              New Entry
            </Typography>
            <Box sx={{ display: "flex", flexDirection: "column", gap: 1 }}>
              <TextField
                value={newEntry.Diagnosis}
                onChange={(e) =>
                  handleAddChange("Diagnosis", e.target.value)
                }
                label="Diagnosis"
                size="small"
              />
              <TextField
                value={newEntry.Codes}
                onChange={(e) => handleAddChange("Codes", e.target.value)}
                label="Codes"
                size="small"
              />
              <TextField
                value={newEntry["Code Type"]}
                onChange={(e) =>
                  handleAddChange("Code Type", e.target.value)
                }
                label="Code Type"
                size="small"
              />
              <Box sx={{ display: "flex", gap: 2, mt: 1 }}>
                <Button
                  startIcon={<SaveIcon />}
                  variant="contained"
                  onClick={handleAddSave}
                  sx={{
                    bgcolor: "#0F4977",
                    borderRadius: 2,
                    "&:hover": { bgcolor: "#0a3256" }
                  }}
                >
                  Save Entry
                </Button>
                <Button
                  variant="outlined"
                  color="error"
                  onClick={() => setIsAdding(false)}
                  sx={{ borderRadius: 2 }}
                >
                  Cancel
                </Button>
              </Box>
            </Box>
          </Paper>
        )}

        {/* List of Entries */}
        {entries.map((entry, index) => (
          <Paper
            key={index}
            variant="outlined"
            sx={{
              p: 1.5,
              mb: 2,
              borderRadius: 1,
              bgcolor: "white",
              position: "relative"
            }}
          >
            {editingIndex === index ? (
              <Box sx={{ display: "flex", flexDirection: "column", gap: 1 }}>
                <TextField
                  value={editedEntry.Diagnosis}
                  onChange={(e) =>
                    handleChange("Diagnosis", e.target.value)
                  }
                  label="Diagnosis"
                  size="small"
                />
                <TextField
                  value={editedEntry.Codes}
                  onChange={(e) => handleChange("Codes", e.target.value)}
                  label="Codes"
                  size="small"
                />
                <TextField
                  value={editedEntry["Code Type"]}
                  onChange={(e) =>
                    handleChange("Code Type", e.target.value)
                  }
                  label="Code Type"
                  size="small"
                />
                <Button
                  startIcon={<SaveIcon />}
                  variant="contained"
                  onClick={() => handleSaveClick(index)}
                  sx={{
                    alignSelf: "flex-start",
                    bgcolor: "#0F4977",
                    borderRadius: 2,
                    mt: 1,
                    "&:hover": { bgcolor: "#0a3256" }
                  }}
                >
                  Save
                </Button>
              </Box>
            ) : (
              <Box>
                <Typography variant="body2">
                  <strong>Diagnosis:</strong> {entry.Diagnosis}
                </Typography>
                <Typography variant="body2">
                  <strong>Codes:</strong> {entry.Codes}
                </Typography>
                <Typography variant="body2">
                  <strong>Code Type:</strong> {entry["Code Type"]}
                </Typography>
                <IconButton
                  size="small"
                  onClick={() => handleEditClick(index)}
                  sx={{
                      position: "absolute",
                      top: 8,
                      right: 8,
                      border: "1px solid #0F4977",
                      borderRadius: "30%",
                      padding: "4px",
                      color: "#0F4977"
                    }}                >
                  <EditIcon fontSize="small" />
                </IconButton>
              </Box>
            )}
          </Paper>
        ))}
      </Box>
    </Box>
  );
};

export default ParametersSection;
