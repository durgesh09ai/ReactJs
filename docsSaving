npm install @onlyoffice/document-editor

  ------------------

  import React, { useEffect } from "react";

const DocumentEditor = () => {
  useEffect(() => {
    const docEditor = new window.DocEditor("onlyoffice-container", {
      document: {
        fileType: "docx",
        key: "random-doc-key", // Unique identifier
        url: "https://your-public-server.com/sample.docx",
      },
      editorConfig: {
        mode: "edit",
      },
    });

    return () => {
      docEditor.destroy();
    };
  }, []);

  return <div id="onlyoffice-container" style={{ width: "100%", height: "600px" }}></div>;
};

export default DocumentEditor;


--------------------------------------

<script type="text/javascript" src="https://onlyoffice.com/sdkjs"></script>

-----------------------
import React, { useEffect, useRef } from "react";

const DocumentEditor = () => {
  const editorRef = useRef(null);

  useEffect(() => {
    if (!window.DocEditor) {
      console.error("OnlyOffice DocEditor not found. Make sure the script is loaded.");
      return;
    }

    editorRef.current = new window.DocEditor("onlyoffice-container", {
      document: {
        fileType: "docx",
        key: "random-doc-key", // Unique identifier
        url: "https://your-public-server.com/sample.docx",
      },
      editorConfig: {
        mode: "edit",
      },
    });

    return () => {
      editorRef.current?.destroy();
    };
  }, []);

  return <div id="onlyoffice-container" style={{ width: "100%", height: "600px" }}></div>;
};

export default DocumentEditor;


------------------------------------------------------

import React from "react";
import { DocumentEditor } from "@onlyoffice/document-editor-react";

const WordEditor = () => {
  return (
    <div style={{ width: "100%", height: "600px" }}>
      <h2>OnlyOffice Document Editor</h2>
      <DocumentEditor
        id="onlyoffice-container"
        documentServerUrl="https://your-onlyoffice-server.com"
        config={{
          document: {
            fileType: "docx",
            key: "random-doc-key",
            url: "https://your-public-server.com/sample.docx",
          },
          editorConfig: {
            mode: "edit",
          },
        }}
      />
    </div>
  );
};

export default WordEditor;

documentServerUrl="https://onlinedocs.onlyoffice.com"
-------------------------------------
CKEditor can be used to render and edit Word (.docx) documents in React, but it does not support .docx natively. You will need additional plugins or libraries to convert .docx to HTML and then edit it in CKEditor

-----------------------------------------------

I was stuck with OnlyOffice because it requires a Document Server URL, which I didn’t have. Without a self-hosted server or a paid cloud subscription, I couldn’t generate the necessary document security token (JWT). I tried using https://onlinedocs.onlyoffice.com, but it returned a "Document security token is not correctly formed" error. OnlyOffice requires either a self-hosted instance or an official cloud service with proper authentication. I explored alternative libraries for rendering and editing Word documents in React. Microsoft Office.js provides full Word integration but needs Office 365. Mammoth.js + CKEditor is lightweight but loses complex formatting. Google Docs API allows cloud-based editing but requires authentication. Collabora Online offers a self-hosted option similar to OnlyOffice. docx.js is useful for generating Word files but lacks full editing capabilities
-------------------------------------

For this spike, I attempted to implement the first option using Microsoft Graph API and Office JavaScript API. However, I encountered a module error when trying to access the Office JavaScript API, which led me to explore the next option—OnlyOffice. While OnlyOffice provided a way to embed an editor into a React app, it required a server-based URL, meaning a self-hosted Document Server was necessary. If working with OneDrive or SharePoint-hosted documents, Microsoft Graph API and Office JavaScript API are good choices, but they require authentication and only function within Office applications. On the other hand, OnlyOffice allows working with publicly accessible documents, supports collaborative editing, and offers more flexibility with multiple file formats such as DOCX, XLSX, and PPTX. However, it comes with the added complexity of self-hosting a document server or subscribing to OnlyOffice’s cloud service. Security-wise, OnlyOffice provides JWT token support for access control, while Microsoft Graph API is better suited for Microsoft 365 users who prefer cloud-based solutions. Ultimately, the best option depends on hosting preferences, security needs, and integration requirements—if you want a cloud-based Microsoft ecosystem, Microsoft Graph API is the way to go, but if you need self-hosted document editing with public file access, OnlyOffice is a better fit.


