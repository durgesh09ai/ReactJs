import React, { useEffect, useState } from "react";
import { Box, MenuItem, Paper, Select, TextField, Typography } from "@mui/material";
import FormHeader from "./FormHeader";
import ResearchInfo from "./ResearchInfo";
import CriteriaSection from "./CriteriaSection";
import MedicalCodingSection from "./MedicalCodingSection";
import ParametersSection from "./ParametersSection";
import UploadSection from "./UploadSection";
import ActionButtons from "./ActionButtons";
import { databricksStore } from "../../../stores/cip/ProtoweaveGenAiStore/DatabricksStore";
import { researchStore } from "../../../stores/cip/ProtoweaveGenAiStore/ResearchStore";
import { observer } from "mobx-react-lite";

interface experimentConfigrationProps{
  researchId:string;
  versionId:string;
}

const ExperimentInterface = (props:experimentConfigrationProps) => {

  const { researchId ,versionId } = props;
  const [activeTab, setActiveTab] = useState("Configuration Form 1");
  const [startDate, setStartDate] = useState<string>("");
  const [endDate, setEndDate] = useState<string>("");

  const dataresult = "";
  databricksStore.setDatabrickResult(dataresult);

  useEffect(() => {
    if (versionId && researchId) {
      researchStore.fetchChatHistory(researchId, versionId);
    }
  }, [versionId, researchId]);


  const code_table =  [
    {
        "Diagnosis": "Type 2 Diabetes Mellitus (T2DM)",
        "Codes": "E11.9",
        "Code Type": "ICD"
    },
    {
        "Diagnosis": "Type 2 Diabetes Mellitus (T2DM) with cardiovascular complications",
        "Codes": "E11.51",
        "Code Type": "ICD"
    },
    {
        "Diagnosis": "Major Adverse Cardiovascular Events (MACE)",
        "Codes": "I21, I22, I25.1",
        "Code Type": "ICD"
    },
    {
        "Diagnosis": "Heart Failure",
        "Codes": "I50.9",
        "Code Type": "ICD"
    },
    {
        "Diagnosis": "Stroke",
        "Codes": "I63.9",
        "Code Type": "ICD"
    },
    {
        "Diagnosis": "Hypertension",
        "Codes": "I10",
        "Code Type": "ICD"
    },
    {
        "Diagnosis": "Chronic Kidney Disease (CKD)",
        "Codes": "N18.9",
        "Code Type": "ICD"
    },
    {
        "Diagnosis": "Urinary Tract Infection (UTI)",
        "Codes": "N39.0",
        "Code Type": "ICD"
    },
    {
        "Diagnosis": "Dehydration",
        "Codes": "E86.0",
        "Code Type": "ICD"
    },
    {
        "Diagnosis": "Percutaneous Coronary Intervention (PCI)",
        "Codes": "3E053CZ",
        "Code Type": "HCPCS"
    },
    {
        "Diagnosis": "Dapagliflozin",
        "Codes": "99204F",
        "Code Type": "HCPCS"
    },
    {
        "Diagnosis": "Sitagliptin",
        "Codes": "99213F",
        "Code Type": "HCPCS"
    },
    {
        "Diagnosis": "Cardiorenal protection",
        "Codes": "G9879",
        "Code Type": "HCPCS"
    },
    {
        "Diagnosis": "Hypoglycemia",
        "Codes": "E16.2",
        "Code Type": "ICD"
    },
    {
        "Diagnosis": "Chronic Coronary Syndrome",
        "Codes": "I25.10",
        "Code Type": "ICD"
    }
];


  const handleTabChange = (tab: string) => {
    setActiveTab(tab);
  };

  const handleUploadProtocol = () => {
    console.log("Upload protocol clicked");
    // Implement protocol upload functionality
  };

  const handleUploadData = () => {
    console.log("Upload data clicked");
    // Implement data upload functionality
  };

  const handleDuplicate = () => {
    console.log("Duplicate clicked");
    // Implement duplication functionality
  };

  const handleRunExperiment = () => {
    const dataresult1 = "test";
    databricksStore.setDatabrickResult(dataresult1);
    console.log("Run experiment clicked");
  };

  return (
    <Box sx={{ maxWidth: "684px", fontSize: "0.875rem" }}>
      <FormHeader
        activeTab={activeTab}
        onTabChange={handleTabChange}
        onUploadProtocol={handleUploadProtocol}
      />
      
      <Box 
        sx={{ 
          width: "100%", 
          bgcolor: "#D9EDFF", 
          borderRadius: "0px 12px 12px 12px",
          p: 2,
          overflow: "hidden"
        }}
      >
        <ResearchInfo
          researchName="Diabetes type1"
          experimentName="Config 1"
          createdDate="May 24, 2025"
          ownerName="@dr.meera"
        />
        
        <Paper 
          elevation={0}
          sx={{ 
            mt: 2, 
            p: 2, 
            borderRadius: 2,
            width: "100%"
          }}
        >
        <Box sx={{ width: "100%" }}>
        <Typography 
        sx={{ 
        fontWeight: "bold",
        fontSize:14,
        color: "black",
        lineHeight: 1.2,
        mb:2
        }}
        >
        Cohost Identification
        </Typography>
        </Box>

        <Box sx={{ display: "flex", gap: 2, mb: 2 }}>
        <Typography 
        sx={{ 
        fontSize:14,
        color: "black",
        mt:1,
        }}
        >
        Age at Index:
        </Typography>
          <Select
              value="40"
              size="small"
              sx={{
                bgcolor: "white",
                borderRadius: 1,
                minWidth: 130
              }}
            >
              <MenuItem value="10">10</MenuItem>
              <MenuItem value="20">20</MenuItem>
              <MenuItem value="40">40</MenuItem>
            </Select>
         </Box>

         <Box sx={{ display: "flex", gap: 2, mb: 2 }}>
        <Typography 
        sx={{ 
        fontSize:14,
        color: "black",
        mt:1,
        }}
        >
        Race / Ethinicity:
        </Typography>
          <Select
              value="10"
              size="small"
              sx={{
                bgcolor: "white",
                borderRadius: 1,
                minWidth: 130
              }}
            >
              <MenuItem value="10">Race1</MenuItem>
              <MenuItem value="20">Race2</MenuItem>
              <MenuItem value="40">Race3</MenuItem>
            </Select>
         </Box>

         <Box sx={{ display: "flex", gap: 2, mb: 2 }}>
        <Typography 
        sx={{ 
        fontSize:14,
        color: "black",
        mt:1,
        }}
        >
        Region:
        </Typography>
          <Select
              value="40"
              size="small"
              sx={{
                bgcolor: "white",
                borderRadius: 1,
                minWidth: 130
              }}
            >
              <MenuItem value="10">Region1</MenuItem>
              <MenuItem value="20">Region2</MenuItem>
              <MenuItem value="40">Region3</MenuItem>
            </Select>
         </Box>
      <Box sx={{ display: "flex", gap: 2, mb: 2 }}>
        <Typography 
        sx={{ 
        fontSize:14,
        color: "black",
        mt:1,
        }}
        >
        SDOH:
        </Typography>
          <Select
              value="10"
              size="small"
              sx={{
                bgcolor: "white",
                borderRadius: 1,
                minWidth: 130
              }}
            >
              <MenuItem value="10">SDOH1</MenuItem>
              <MenuItem value="20">SDOH2</MenuItem>
              <MenuItem value="40">SDOH3</MenuItem>
            </Select>
         </Box>

         <Box sx={{ display: "flex", gap: 2, mb: 2 }}>
        <Typography 
        sx={{ 
        fontSize:14,
        color: "black",
        mt:1,
        }}
        >
        Priod of Interest:
        </Typography>
        <TextField
          type="date"
          label="Start Date"
          value={startDate}
          onChange={(e) => setStartDate(e.target.value)}
          InputLabelProps={{ shrink: true }}
          size="small"
          required
        />
        <TextField
          type="date"
          label="End Date"
          value={endDate}
          onChange={(e) => setEndDate(e.target.value)}
          InputLabelProps={{ shrink: true }}
          size="small"
          required
        />
         </Box>


         </Paper>


        <Paper 
          elevation={0}
          sx={{ 
            mt: 2, 
            p: 2, 
            borderRadius: 2,
            width: "100%"
          }}
        >
          <CriteriaSection />
          <MedicalCodingSection />
          <Box sx={{ mt: 2, width: "100%" }}>
            <ParametersSection 
            />
            {/* <UploadSection onUploadData={handleUploadData} /> */}
          </Box>
          
          <ActionButtons
            onDuplicate={handleDuplicate}
            onRunExperiment={handleRunExperiment}
          />
        </Paper>
      </Box>
    </Box>
  );
};

export default observer(ExperimentInterface);
