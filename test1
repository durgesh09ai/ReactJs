import React, { useCallback, useEffect, useState } from "react";
import {
  Box,
  TextField,
  Typography,
  Paper,
  Stack,
  Autocomplete,
  Checkbox,
  Chip,
  IconButton,
} from "@mui/material";
import { useDropzone } from "react-dropzone";
import CheckBoxOutlineBlankIcon from "@mui/icons-material/CheckBoxOutlineBlank";
import CheckBoxIcon from "@mui/icons-material/CheckBox";
import CloseIcon from "@mui/icons-material/Close";
import { mainPageStore } from "../../stores/MainPageStore";
import InfoOutlinedIcon from "@mui/icons-material/InfoOutlined";

const icon = <CheckBoxOutlineBlankIcon fontSize="small" />;
const checkedIcon = <CheckBoxIcon fontSize="small" />;

export interface BasicInfoFormProps {
  data: any;
  onDataChange: (data: any) => void;
}

interface dropDownItems {
  id: string;
  name: string;
}

const sectionData = {
  workType: [
    { key: "reporting", label: "Reporting/MI" },
    { key: "strategy", label: "Strategy" },
    { key: "analytics", label: "Analytics Data Management" },
    { key: "modeling", label: "Modeling" },
    { key: "management", label: "Model Risk Management" },
    { key: "monitoring", label: "Model Monitoring" },
    { key: "engineering", label: "Data Engineering" },
    { key: "software", label: "Software Engineering" },
    { key: "others", label: "Others" },
  ],
  scopeComplexity: [
    { key: "simple", label: "Simple", message: "Simplistic Tasks, such as Regular Reporting, MI dashboards, Data Pull, etc. " },
    { key: "medium", label: "Medium", message: "Moderate Complexity, such as Automation, stand-alone Datamart, Basic Modelling, etc. " },
    { key: "complex", label: "Complex", message: "High Complexity, such as end-to-end business transformation, strategy development, complex modelling, etc. " },
  ],
  valueProposition: [
    {
      key: "supplying-talent",
      label: "Supplying Talent",
      message: "EXL's value proposition is limited to just supplying talent to the client. EXL doesnâ€™t have any influence on the scope, methodology or outcome delivered by its talent ",
    },
    {
      key: "influence-analytics-output",
      label: "Influence Analytics Output",
      message: "EXL plays an active role in informing and controlling the analytics output, i.e. our talent actively influence the scope, methodology and output of the analytics deliverables prepared by them .",
    },
    {
      key: "influence-business-outcomes",
      label: "Influence Business Outcomes",
      message: "EXL plays a critical role in understanding, influencing, and measuring the business outcomes delivered by them. The outputs created by EXL either helps client create new revenues streams or reducing costs  e.g., cost associated with non-adherence (regulatory compliance, fraud detection, etc.) .",
    },
  ],
  AIMLPenetration: [
    { key: "no-ai-ml", label: "No AI-ML" },
    { key: "basic-ml", label: "Basic ML" },
    { key: "advanced-ai-ml", label: "Advanced AI-ML" },
  ],
  degreeofClient: [
    { key: "no-advocacy", label: "No Advocacy" },
    { key: "internal-advocacy", label: "Internal Advocacy" },
    { key: "external-advocacy", label: "External Advocacy" },
  ],
};


export const SolutionBasicform: React.FC<BasicInfoFormProps> = ({
  data,
  onDataChange,
}) => {
  const [clientList, setClientList] = useState<dropDownItems[]>([]);
  const [formData, setFormData] = useState<any>(data || {});

  useEffect(() => {
    if (JSON.stringify(data) !== JSON.stringify(formData)) {
      setFormData(data || {});
    }
  }, [data]);

  useEffect(() => {
    if (typeof onDataChange === "function") {
      onDataChange(formData);
    }
  }, [formData]);
 
  const {
    fetchFillerListData,
    fetchByTechnologyOptions,
    technologyOptionsList,
  } = mainPageStore;

  useEffect(() => {
    const loadClientData = async () => {
      const data = await fetchFillerListData("client");
      setClientList(data);
    };
    loadClientData();
  }, []);

  useEffect(() => {
    fetchByTechnologyOptions();
  }, []);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    onDataChange({ ...data, [name]: value });
  };

  const handleDrop = useCallback((acceptedFiles: File[]) => {
    const newImages = acceptedFiles.map((file) =>
      URL.createObjectURL(file)
    );
    onDataChange({
      ...data,
      images: [...(data.images || []), ...newImages],
    });
  }, [data, onDataChange]);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop: handleDrop,
    accept: { "image/*": [] },
    multiple: true,
  });

  const handleDeleteImage = (index: number) => {
    const updatedImages = data.images.filter((_: any, i: number) => i !== index);
    onDataChange({ ...data, images: updatedImages });
  };

  const handleDeleteChip = (listKey: string, idToDelete: string) => {
    onDataChange({
      ...data,
      [listKey]: (data[listKey] || []).filter((item: any) => item.id !== idToDelete),
    });
  };

  const handleArrayFieldChange = (field: string, value: any[]) => {
    setFormData((prev: any) => ({ ...prev, [field]: value }));
  };

  const handleSingleSelectChange = (
    field: string,
    value: any,
    autoFillKey?: string
  ) => {
    setFormData((prev: any) => ({
      ...prev,
      [field]: value ? [value] : [],
      ...(autoFillKey && value?.message
        ? { [autoFillKey]: value.message }
        : {}),
    }));
  };

  const createSingleSelectWithMessage = (
    title: string,
    field: string,
    options: { key: string; label: string; message?: string }[],
    autoFillKey?: string
  ) => {
    const selected = formData[field]?.[0] || null;

    return (
      <Box sx={{ width: 282,mb:3 }}>
        <Typography variant="body2" gutterBottom>
          {title}
        </Typography>
        <Autocomplete
          options={options}
          value={selected}
          getOptionLabel={(option) => option.label}
          onChange={(_, newValue) =>
            handleSingleSelectChange(field, newValue, autoFillKey)
          }
          isOptionEqualToValue={(option, value) => option.key === value.key}
          renderInput={(params) => (
            <TextField
              {...params}
              variant="outlined"
              placeholder={`Select ${title}`}
              size="small"
              InputLabelProps={{ sx: { fontSize: 14 } }}
            />
          )}
        />
        {selected?.message && (
          <Box sx={{ mt: 1, display: "flex", alignItems: "center", gap: 1 }}>
            <InfoOutlinedIcon fontSize="small" color="info" />
            <Typography variant="caption" color="text.secondary">
              {selected.message}
            </Typography>
          </Box>
        )}
      </Box>
    );
  };


  const createMultiSelectSection = (
    title: string,
    field: string,
    options: { key: string; label: string }[],
    width: number = 282
  ) => {
    const selected = formData[field] || [];

    return (
      <Box sx={{ width }}>
        <Typography variant="body2" gutterBottom>
          {title}
        </Typography>
        <Autocomplete
          multiple
          options={options}
          disableCloseOnSelect
          value={selected}
          getOptionLabel={(option) => option.label}
          onChange={(_, newValue) => handleArrayFieldChange(field, newValue)}
          isOptionEqualToValue={(option, value) => option.key === value.key}
          renderTags={() => null}
          renderOption={(props, option, { selected }) => (
            <li {...props}>
              <Checkbox
                icon={icon}
                checkedIcon={checkedIcon}
                style={{ marginRight: 8 }}
                checked={selected}
              />
              {option.label}
            </li>
          )}
          renderInput={(params) => (
            <TextField
              {...params}
              variant="outlined"
              placeholder={`Select ${title}`}
              size="small"
              InputLabelProps={{ sx: { fontSize: 14 } }}
            />
          )}
        />
        <Box sx={{ mt: 1, display: "flex", gap: 1, flexWrap: "wrap" }}>
          {selected.map((item: any) => (
            <Chip
              key={item.key}
              label={item.label}
              onDelete={() =>
                handleArrayFieldChange(
                  field,
                  selected.filter((v: any) => v.key !== item.key)
                )
              }
              color="primary"
              variant="outlined"
              size="small"
            />
          ))}
        </Box>
      </Box>
    );
  };

  return (
    <Paper elevation={0} sx={{ width: { xs: "100%", md: "604px" }, p: 1 }}>
      <Stack spacing={2}>
        <Box sx={{ display: "flex", alignItems: "center", gap: 1 }}>
          <img src="./formIcon.png" alt="Start icon" width={20} height={20} />
          <Typography variant="subtitle1">Start Your Story</Typography>
        </Box>

        <Typography variant="body2" color="text.secondary">
          General Information
        </Typography>

        <Box
          sx={{
            display: "flex",
            flexDirection: { xs: "column", md: "row" },
            gap: 4,
            width: "100%",
          }}
        >
          {/* Left Column */}
          <Stack spacing={2} sx={{ flex: 1 }}>
            {/* Solution Name */}
            <Box>
              <Typography variant="body2" gutterBottom>
                Solution Name
              </Typography>
              <TextField
                required
                name="solutionName"
                value={data.solutionName || ""}
                onChange={handleChange}
                placeholder="Enter name of Solution"
                fullWidth
                variant="outlined"
                size="small"
                sx={{width:280}}
              />
            </Box>

            {/* Client Name */}
            <Box sx={{ width: 282 }}>
              <Typography variant="body2" gutterBottom>
                Client Name
              </Typography>
              <Autocomplete
                multiple
                options={clientList}
                disableCloseOnSelect
                value={data.clients || []}
                getOptionLabel={(option) => option.name}
                onChange={(_, newValue) =>
                  onDataChange({ ...data, clients: newValue })
                }
                isOptionEqualToValue={(option, value) => option.id === value.id}
                renderTags={() => null}
                renderOption={(props, option, { selected }) => (
                  <li {...props}>
                    <Checkbox
                      icon={icon}
                      checkedIcon={checkedIcon}
                      style={{ marginRight: 8 }}
                      checked={selected}
                    />
                    {option.name}
                  </li>
                )}
                renderInput={(params) => (
                  <TextField
                    {...params}
                    variant="outlined"
                    label="Select Clients"
                    placeholder="Select Clients"
                    size="small"
                    InputLabelProps={{ sx: { fontSize: 14 } }}
                  />
                )}
              />
              <Box sx={{ mt: 1, display: "flex", gap: 1, flexWrap: "wrap" }}>
                {(data.clients || []).map((item: any) => (
                  <Chip
                    key={item.id}
                    label={item.name}
                    onDelete={() => handleDeleteChip("clients", item.id)}
                    color="primary"
                    variant="outlined"
                    size="small"
                  />
                ))}
              </Box>
            </Box>

           {createMultiSelectSection("Work Type", "workType", sectionData.workType, 282)}
           {createMultiSelectSection("AI-ML Penetration", "AIMLPenetration", sectionData.AIMLPenetration,282)}

            {/* Smart Tags */}
            <Box sx={{ width: 282 }}>
              <Typography variant="body2" gutterBottom>
                Smart Tags
              </Typography>

              <Autocomplete
                  multiple
                  freeSolo
                  filterSelectedOptions
                  options={technologyOptionsList}
                  value={data.smartTags || []}
                  getOptionLabel={(option) => typeof option === "string" ? option : option.name}
                  onChange={(_, newValue) => {
                    const formatted = newValue.map((item) => {
                      if (typeof item === "string") {
                        return { id: item.toLowerCase().replace(/\s+/g, "-"), name: item };
                      }
                      return item;
                    });
                    onDataChange({ ...data, smartTags: formatted });
                  }}
                  isOptionEqualToValue={(option, value) => option.id === value.id}
                  renderTags={() => null}
                  renderOption={(props, option, { selected }) => (
                    <li {...props}>
                      <Checkbox
                        icon={icon}
                        checkedIcon={checkedIcon}
                        style={{ marginRight: 8 }}
                        checked={selected}
                      />
                      {typeof option === "string" ? option : option.name}
                    </li>
                  )}
                  renderInput={(params) => (
                    <TextField
                      {...params}
                      variant="outlined"
                      placeholder="Type to add or select"
                      size="small"
                      InputLabelProps={{ sx: { fontSize: 14 } }}
                    />
                  )}
                />

          <Box sx={{ mt: 1, display: "flex", gap: 1, flexWrap: "wrap" }}>
            {(data.smartTags || []).map((item: any) => (
              <Chip
                key={item.id}
                label={item.name}
                onDelete={() => handleDeleteChip("smartTags", item.id)}
                color="primary"
                variant="outlined"
                size="small"
              />
            ))}
          </Box>
            </Box>
 
          </Stack>

          {/* Right Column - Image Upload */}
          <Box sx={{ flex: 1, minWidth: "40%" }}>
            <Typography variant="body2" gutterBottom>
              Upload Images
            </Typography>
            <Box
              {...getRootProps()}
              sx={{
                border: "2px dashed rgba(15,73,119,0.5)",
                p: 2,
                borderRadius: 2,
                textAlign: "center",
                cursor: "pointer",
                mt: 2,
                minHeight: "100px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                flexDirection: "column",
              }}
            >
              <input {...getInputProps()} />
              {isDragActive ? (
                <Typography variant="body2">Drop the files here ...</Typography>
              ) : (
                <img
                  src="./add_file.svg"
                  alt="Upload"
                  style={{ width: "66px", height: "auto" }}
                />
              )}
            </Box>

            <Box sx={{ display: "flex", gap: 2, mt: 2, flexWrap: "wrap" }}>
              {(data.images || []).map((img: string, idx: number) => (
                <Box
                  key={idx}
                  sx={{
                    position: "relative",
                    width: 40,
                    height: 40,
                    borderRadius: 1,
                    overflow: "hidden",
                    border: "1px solid #ccc",
                  }}
                >
                  <img
                    src={img}
                    alt={`img-${idx}`}
                    style={{ width: "100%", height: "100%", objectFit: "cover" }}
                  />
                  <IconButton
                    size="small"
                    sx={{
                      position: "absolute",
                      top: -4,
                      right: -4,
                      backgroundColor: "#fff",
                      border: "1px solid #ccc",
                      "&:hover": { backgroundColor: "#f5f5f5" },
                    }}
                    onClick={() => handleDeleteImage(idx)}
                  >
                    <CloseIcon sx={{ fontSize: 12 }} />
                  </IconButton>
                </Box>
              ))}
            </Box>
           <Box sx={{height:20}}>

           </Box>

            {createSingleSelectWithMessage(
              "Scope Complexity",
              "scopeComplexity",
              sectionData.scopeComplexity,
              "scopeDescription"
            )}
            {createSingleSelectWithMessage(
              "Value Proposition",
              "valueProposition",
              sectionData.valueProposition
            )}

            {createMultiSelectSection(
            "Degree of Client Advocacy",
            "degreeofClient",
            sectionData.degreeofClient,
            282
            )}

          </Box>
        </Box>
      </Stack>
    </Paper>
  );
};
