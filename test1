  const [selectedTechnology, setSelectedTechnology] = useState<dropDownItems[]>([]);


<Autocomplete
  multiple
  freeSolo
  options={technologyOptionsList}
  value={selectedTechnology}
  getOptionLabel={(option) =>
    typeof option === "string" ? option : option.name
  }
  onChange={(_, newValue) => {
    const formatted = newValue.map((item) => {
      if (typeof item === "string") {
        return {
          id: item.toLowerCase().replace(/\s+/g, "-"),
          name: item,
        };
      }
      return item;
    });
    setSelectedTechnology(formatted);
  }}
  isOptionEqualToValue={(option, value) => option.id === value.id}
  renderTags={() => null}
  renderInput={(params) => (
    <TextField
      {...params}
      placeholder="Type to add or select"
      size="small"
      variant="outlined"
    />
  )}
/>

-----------------------------------

   <Box sx={{ mt: 1, display: 'flex', gap: 1, flexWrap: 'wrap' }}>
  {selectedTechnology.map((item) => (
    <Chip
      key={item.id}
      label={item.name}
      onDelete={() =>
        setSelectedTechnology((prev) =>
          prev.filter((tech) => tech.id !== item.id)
        )
      }
      color="primary"
      variant="outlined"
      size="small"
    />
  ))}
</Box>
