import React, { useState, useEffect } from "react";
import {
  Paper,
  Box,
  Typography,
  IconButton,
  Menu,
  MenuItem,
} from "@mui/material";
import MoreVertIcon from "@mui/icons-material/MoreVert";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";
import { observer } from "mobx-react-lite";
import { mainPageStore } from "../../stores/MainPageStore";
import SetupHeader from "./SetupHeader";

const columnWidths = [
  "200px", // Solution Name
  "120px", // Type
  "100px", // IMU
  "100px", // SGU
  "140px", // Created On
  "100px", // Status
  "80px",  // Views
  "60px",  // Actions
];

const SolutionPanel: React.FC = () => {
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);
  const [currentPage, setCurrentPage] = useState(1);
  const productPerPage = 4;
  const start = (currentPage - 1) * productPerPage;

  const {
    fetchSolutionListData,
    solutionListData,
    solutionlistloading
  } = mainPageStore;

  useEffect(() => {
    fetchSolutionListData(start, productPerPage);
  }, [currentPage]);

  const isMenuOpen = Boolean(anchorEl);
  const solutionlist = solutionListData?.result ?? [];

  const columnTitles = [
    "Solution Name",
    "Type",
    "IMU",
    "SGU",
    "Created On",
    "Status",
    "Views",
    "Actions",
  ];

  return (
    <Paper elevation={1} sx={{ maxWidth: "100%", pb: 2, px: 1, borderRadius: 1 }}>
      <SetupHeader title="My Solution" />

      <Paper
        elevation={0}
        sx={{
          border: "1px solid rgba(18,18,21,0.10)",
          borderRadius: 0,
          padding: 0,
          overflowX: "auto",
        }}
      >
        {/* Header Row */}
        <Box
          sx={{
            display: "grid",
            gridTemplateColumns: columnWidths.join(" "),
            alignItems: "center",
            backgroundColor: "#0F4977",
            color: "#fff",
            px: 2,
            py: 1,
            fontSize: 12,
            fontWeight: 600,
          }}
        >
          {columnTitles.map((title, index) => (
            <Typography
              key={index}
              sx={{ textAlign: index === columnTitles.length - 1 ? "right" : "left" }}
            >
              {title}
            </Typography>
          ))}
        </Box>

        {/* Data Rows */}
        {solutionlist.map((item: any) => (
          <Box
            key={item.id}
            sx={{
              display: "grid",
              gridTemplateColumns: columnWidths.join(" "),
              alignItems: "center",
              px: 2,
              py: 1.2,
              borderBottom: "1px solid #f0f0f0",
              fontSize: 12,
            }}
          >
            <Typography>{item.name}</Typography>
            <Typography>{item.tags?.[0] || "—"}</Typography>
            <Typography>N/A</Typography>
            <Typography>N/A</Typography>
            <Typography>—</Typography>
            <Typography>Active</Typography>
            <Typography>{item.views}</Typography>

            <Box sx={{ display: "flex", justifyContent: "flex-end" }}>
              <IconButton
                size="small"
                onClick={(e) => setAnchorEl(e.currentTarget)}
              >
                <MoreVertIcon />
              </IconButton>
              <Menu
                anchorEl={anchorEl}
                open={isMenuOpen}
                onClose={() => setAnchorEl(null)}
                anchorOrigin={{ vertical: "bottom", horizontal: "right" }}
                transformOrigin={{ vertical: "top", horizontal: "right" }}
              >
                <MenuItem onClick={() => setAnchorEl(null)}>
                  <EditIcon fontSize="small" sx={{ mr: 1 }} /> Edit
                </MenuItem>
                <MenuItem onClick={() => setAnchorEl(null)}>
                  <DeleteIcon fontSize="small" sx={{ mr: 1 }} /> Archive
                </MenuItem>
              </Menu>
            </Box>
          </Box>
        ))}
      </Paper>
    </Paper>
  );
};

export default observer(SolutionPanel);
