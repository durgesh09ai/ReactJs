import React, { useState, useMemo } from 'react';
import {
  Box,
  Table,
  TableHead,
  TableRow,
  TableCell,
  TableBody,
  TableContainer,
  Paper,
  TextField,
  Typography,
  Button,
  Stack,
  Chip,
  IconButton,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Menu,
  MenuItem,
  LinearProgress,
} from '@mui/material';
import { useDropzone } from 'react-dropzone';
import CloudUploadIcon from '@mui/icons-material/CloudUpload';
import MoreVertIcon from "@mui/icons-material/MoreVert";
import DeleteIcon from "@mui/icons-material/Delete";
import ReplayIcon from '@mui/icons-material/Replay';

const UploadContractListing = () => {
  const [pdfDialogOpen, setPdfDialogOpen] = useState(false);
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);
  const [uploading, setUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);

  const onDrop = (acceptedFiles: File[]) => {
    const pdfFiles = acceptedFiles.filter(file => file.type === "application/pdf");
    setUploadedFiles(prev => [...prev, ...pdfFiles]);
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    multiple: true,
    accept: { "application/pdf": [] }
  });

  const handleUploadAll = () => {
    setUploading(true);
    setUploadProgress(0);

    const interval = setInterval(() => {
      setUploadProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          setTimeout(() => {
            setUploading(false);
            setUploadedFiles([]);
            setPdfDialogOpen(false);
          }, 800);
          return 100;
        }
        return prev + 10;
      });
    }, 300);
  };

  return (
    <>
      {/* Your main table layout remains unchanged */}

      <Dialog open={pdfDialogOpen} onClose={() => setPdfDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle sx={{ fontSize: 14 }}>Upload Your PDF</DialogTitle>
        <DialogContent sx={{ bgcolor: "#EAF2F7", py: 3 }}>
          <Box
            {...getRootProps()}
            sx={{
              border: '2px dashed #aaa',
              borderRadius: 2,
              padding: 4,
              textAlign: 'center',
              cursor: 'pointer',
              backgroundColor: isDragActive ? '#ddd' : '#F7FBFF',
              transition: '0.3s'
            }}
          >
            <input {...getInputProps()} />
            <CloudUploadIcon sx={{ fontSize: 48, mb: 1, color: '#0F4977' }} />
            <Typography variant="body1" gutterBottom>
              Drag & drop PDF files or <span style={{ color: '#0F4977', textDecoration: 'underline' }}>Browse</span>
            </Typography>
            <Typography variant="caption">Supported format: PDF. Max size: 10MB</Typography>
          </Box>

          {/* File list */}
          {uploadedFiles.length > 0 && (
            <Box mt={3}>
              <Typography variant="subtitle2">Files to upload:</Typography>
              {uploadedFiles.map((file, idx) => (
                <Typography variant="body2" key={idx}>â€¢ {file.name}</Typography>
              ))}
            </Box>
          )}

          {/* Progress bar */}
          {uploading && (
            <Box mt={3}>
              <Typography variant="body2" gutterBottom>Uploading... {uploadProgress}%</Typography>
              <LinearProgress variant="determinate" value={uploadProgress} />
            </Box>
          )}
        </DialogContent>

        <DialogActions>
          <Button onClick={() => setPdfDialogOpen(false)} disabled={uploading}>Cancel</Button>
          <Button
            variant="contained"
            onClick={handleUploadAll}
            disabled={uploadedFiles.length === 0 || uploading}
          >
            Upload All
          </Button>
        </DialogActions>
      </Dialog>

      {/* Trigger Button */}
      <Box sx={{ textAlign: 'right', mt: 2 }}>
        <Button
          variant="outlined"
          startIcon={<CloudUploadIcon />}
          size="small"
          onClick={() => setPdfDialogOpen(true)}
        >
          Upload PDF
        </Button>
      </Box>
    </>
  );
};

export default UploadContractListing;
