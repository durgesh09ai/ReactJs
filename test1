import React, { useState } from "react";
import {
  Box,
  FormControl,
  InputLabel,
  MenuItem,
  Select,
  SelectChangeEvent,
  ListSubheader,
} from "@mui/material";
import KeyboardArrowDownIcon from "@mui/icons-material/KeyboardArrowDown";

// ---------- Type Definitions ----------
type SubCategoryType = {
  id: string;
  name: string;
};

type SubCategory = {
  SubCategoryTypeList: SubCategoryType[];
};

type LobObject = {
  Lob: string;
  SubCategoryList: {
    [subCategoryName: string]: SubCategory;
  };
};

type TypeOptionsList = {
  [lobName: string]: LobObject;
};

// ---------- Component ----------
const TypeDropdown: React.FC = () => {
  const [selectedType, setSelectedType] = useState<string>("");

  const handleTypeChange = (event: SelectChangeEvent<string>) => {
    setSelectedType(event.target.value);
  };

  // Sample mock data (replace with your real `typeOptionsList`)
  const typeOptionsList: TypeOptionsList = {
    LOB1: {
      Lob: "LOB1",
      SubCategoryList: {
        SubCatA: {
          SubCategoryTypeList: [
            { id: "1", name: "Option A1" },
            { id: "2", name: "Option A2" },
          ],
        },
        SubCatB: {
          SubCategoryTypeList: [
            { id: "3", name: "Option B1" },
            { id: "4", name: "Option B2" },
          ],
        },
      },
    },
    LOB2: {
      Lob: "LOB2",
      SubCategoryList: {
        SubCatC: {
          SubCategoryTypeList: [
            { id: "5", name: "Option C1" },
            { id: "6", name: "Option C2" },
          ],
        },
      },
    },
  };

  const renderTypeOptionsDropdown = () => {
    const options: JSX.Element[] = [];

    Object.entries(typeOptionsList).forEach(([lobName, lobObj]) => {
      const subCategories = lobObj.SubCategoryList;

      Object.entries(subCategories).forEach(([subCatName, subCatObj]) => {
        // Non-selectable header
        options.push(
          <ListSubheader key={`${lobName}-${subCatName}`}>
            {subCatName}
          </ListSubheader>
        );

        // Selectable options
        subCatObj.SubCategoryTypeList.forEach((type) => {
          options.push(
            <MenuItem key={type.id} value={type.id}>
              {type.name}
            </MenuItem>
          );
        });
      });
    });

    return options;
  };

  return (
    <Box width={300}>
      <FormControl fullWidth>
        <InputLabel id="type-dropdown-label">Select Type</InputLabel>
        <Select
          labelId="type-dropdown-label"
          value={selectedType}
          onChange={handleTypeChange}
          label="Select Type"
          displayEmpty
          IconComponent={KeyboardArrowDownIcon}
          sx={{
            bgcolor: "background.paper",
            borderRadius: "8px",
            ".MuiOutlinedInput-notchedOutline": {
              borderColor: "rgba(211,209,209,0.4)",
            },
            "&.Mui-focused .MuiOutlinedInput-notchedOutline": {
              borderColor: "rgba(211,209,209,0.6)",
            },
            "& .MuiSelect-select": {
              backgroundColor: "white",
            },
            "& .MuiPaper-root": {
              backgroundColor: "white",
              zIndex: 9999,
            },
          }}
          MenuProps={{
            PaperProps: {
              sx: {
                bgcolor: "white",
                zIndex: 9999,
              },
            },
          }}
        >
          <MenuItem value="" disabled>
            Select Type
          </MenuItem>
          {renderTypeOptionsDropdown()}
        </Select>
      </FormControl>
    </Box>
  );
};

export default TypeDropdown;
