import React, { useEffect, useState } from "react";
import { Box, Typography, Stack, Paper } from "@mui/material";
import { researchStore } from "../../../stores/cip/ProtoweaveGenAiStore/ResearchStore";

const ThinkingProcess = () => {
  const [loadingDots, setLoadingDots] = useState("");
  const data = researchStore.thinkingData;

  useEffect(() => {
    if (researchStore.isResearching) {
      const intervalId = setInterval(() => {
        setLoadingDots((prevDots) => (prevDots.length < 3 ? prevDots + "." : ""));
      }, 500);
      return () => clearInterval(intervalId);
    } else {
      setLoadingDots("");
    }
  }, [researchStore.isResearching]);

  const formatThinkingStep = (step: string) => {
    return step
      .replace(/_/g, " ")
      .split(" ")
      .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
      .join(" ");
  };

  const getStepLabel = (step: string, progress: number | null) => {
    const percent = progress !== null ? ` (${Math.round(progress)}%)` : "";
    switch (step) {
      case "searching":
        return "Searching Queries" + percent;
      case "selecting_papers":
        return "Selecting Papers" + percent;
      case "analyzing_paper":
        return "Analyzing Papers" + percent;
      case "synthesizing_research":
        return "Synthesizing Research" + percent;
      case "generating_report":
        return "Generating Report" + percent;
      case "completed":
        return "Research Completed";
      case "error":
        return "An Error Occurred";
      default:
        return formatThinkingStep(step) + percent;
    }
  };

  return (
    <>
      <Box
        sx={{
          borderRadius: "16px 16px 0 0",
          backgroundColor: "#D9EDFF",
          p: 0.6,
          width: "100%",
          maxWidth: 400,
          mx: "auto",
          mb: "1px",
        }}
      >
        <Box
          sx={{
            borderRadius: "16px 16px 0 0",
            backgroundColor: "#fff",
            width: "100%",
            p: 1,
          }}
        >
          <Typography variant="h6" align="center" fontSize={14} fontWeight={400}>
            Reasoning
          </Typography>
        </Box>
      </Box>

      <Box
        sx={{
          border: "1px solid #CFE3F3",
          borderRadius: "0 0 16px 16px",
          backgroundColor: "#D9EDFF",
          p: 2,
          width: "100%",
          maxWidth: 400,
          mx: "auto",
        }}
      >
        <Box
          sx={{
            display: "flex",
            flexDirection: "row",
            position: "relative",
            border: "1px solid #fff",
            borderRadius: "16px",
            backgroundColor: "#fff",
            p: 2,
          }}
        >
          {/* Vertical Line */}
          <Box
            sx={{
              width: "2px",
              display: "flex",
              justifyContent: "center",
              position: "relative",
            }}
          >
            <Box
              sx={{
                position: "absolute",
                top: 0,
                bottom: 0,
                left: "50%",
                transform: "translateX(-50%)",
              }}
            />
          </Box>

          {/* Content */}
          <Box sx={{ flex: 1 }}>
            {data.map((item, sIndex) => (
              <Box key={sIndex} sx={{ mb: 3 }}>
                <Typography
                  variant="subtitle2"
                  sx={{
                    display: "inline-block",
                    backgroundColor: "rgba(18, 18, 21, 0.30)",
                    color: "#fff",
                    px: 1.5,
                    py: 0.5,
                    borderRadius: "0 8px 8px 0",
                    fontWeight: 600,
                    fontSize: "0.75rem",
                    mb: 1,
                  }}
                >
                  {formatThinkingStep(item.step)}
                </Typography>

                <Stack spacing={0}>
                  {item.details && item.details.messages && (
                    <Box
                      sx={{
                        borderLeft: "2px solid #ccc",
                        backgroundColor: "#e4e4e533",
                        p: 1,
                      }}
                    >
                      <Box sx={{ display: "flex", alignItems: "flex-start" }}>
                        {/* Dot + line */}
                        <Box
                          sx={{
                            width: 24,
                            height: 24,
                            position: "relative",
                            flexShrink: 0,
                            mt: 1,
                          }}
                        >
                          <Box
                            sx={{
                              position: "absolute",
                              top: "50%",
                              right: "-15%",
                              transform: "translate(-50%, -50%)",
                              width: 8,
                              height: 8,
                              borderRadius: "50%",
                              backgroundColor: "#ccc",
                              zIndex: 1,
                            }}
                          />
                          <Box
                            sx={{
                              position: "absolute",
                              top: "50%",
                              right: "35%",
                              height: 2,
                              width: "100%",
                              backgroundColor: "#B0BEC5",
                              transform: "translateY(-50%)",
                              zIndex: 0,
                            }}
                          />
                        </Box>

                        {/* Text content */}
                        <Box sx={{ flex: 1, ml: 1 }}>
                          {item.progress !== null && (
                            <Typography
                              variant="subtitle2"
                              sx={{
                                fontSize: "0.8rem",
                                color: "#636262",
                                fontWeight: 500,
                                mb: 0.5,
                                pt: 1,
                              }}
                            >
                              {getStepLabel(item.step, item.progress)}
                            </Typography>
                          )}

                          {item.details.messages.map((msg: any, index: number) => (
                            <Paper
                              key={index}
                              elevation={0}
                              sx={{ p: 1.5, backgroundColor: "#fff", mb: 1 }}
                            >
                              <Typography variant="body2" sx={{ fontSize: "0.85rem" }}>
                                {msg.message}
                              </Typography>
                              {msg.sub && (
                                <Typography
                                  variant="caption"
                                  sx={{ color: "#999", display: "block", mt: 0.5 }}
                                >
                                  {msg.sub}
                                </Typography>
                              )}
                            </Paper>
                          ))}
                        </Box>
                      </Box>
                    </Box>
                  )}
                </Stack>
              </Box>
            ))}
          </Box>
        </Box>
      </Box>
    </>
  );
};

export default ThinkingProcess;
