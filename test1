<Autocomplete
  multiple
  freeSolo
  filterSelectedOptions
  options={technologyOptionsList}
  value={data.smartTags || []}
  getOptionLabel={(option) => typeof option === "string" ? option : option.name}
  onChange={(_, newValue) => {
    const formatted = newValue.map((item) => {
      if (typeof item === "string") {
        return { id: item.toLowerCase().replace(/\s+/g, "-"), name: item };
      }
      return item;
    });
    onDataChange({ ...data, smartTags: formatted });
  }}
  isOptionEqualToValue={(option, value) => option.id === value.id}
  renderTags={() => null}
  renderOption={(props, option, { selected }) => (
    <li {...props}>
      <Checkbox
        icon={icon}
        checkedIcon={checkedIcon}
        style={{ marginRight: 8 }}
        checked={selected}
      />
      {typeof option === "string" ? option : option.name}
    </li>
  )}
  renderInput={(params) => (
    <TextField
      {...params}
      variant="outlined"
      label="Select or Add Smart Tags"
      placeholder="Type to add or select"
      size="small"
      InputLabelProps={{ sx: { fontSize: 14 } }}
    />
  )}
/>


------------------------


<Box sx={{ mt: 1, display: "flex", gap: 1, flexWrap: "wrap" }}>
  {(data.smartTags || []).map((item: any) => (
    <Chip
      key={item.id}
      label={item.name}
      onDelete={() => handleDeleteChip("smartTags", item.id)}
      color="primary"
      variant="outlined"
      size="small"
    />
  ))}
</Box>

