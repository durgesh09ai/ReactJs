import React, { useState } from 'react';
import { observer } from "mobx-react-lite";

import { 
  Box, 
  Paper, 
  TextField, 
  Select, 
  MenuItem, 
  FormControl, 
  Typography,
  IconButton
} from '@mui/material';
import { Search as SearchIcon, Refresh as RefreshIcon } from '@mui/icons-material';
import { FileTreeItem } from './FileTreeItem';
import { mainPageStore } from "../../stores/MainPageStore";

interface FileNode {
  id: string;
  name: string;
  type: 'file' | 'folder';
  children?: FileNode[];
  isExpanded?: boolean;
}

const fileStructure: FileNode[] = [
  {
    id: 'main',
    name: 'src',
    type: 'folder',
    isExpanded: false,
    children: [
      { id: 'utils1', name: 'utils.py', type: 'file' },
      { id: 'transformer1', name: 'transformer.py', type: 'file' },
      { id: 'metrics1', name: 'metrics_engine.py', type: 'file' }
    ]
  },
  {
    id: 'pipelines',
    name: 'pipelines',
    type: 'folder',
    isExpanded: false,
    children: [
      { id: 'utils2', name: 'utils.py', type: 'file' },
      { id: 'transformer2', name: 'transformer.py', type: 'file' },
      { id: 'metrics2', name: 'metrics_engine.py', type: 'file' }
    ]
  },
  {
    id: 'pipelines2',
    name: 'Transform SQL to DAX.txt1',
    type: 'file'
  },
  {
    id: 'pipelines3',
    name: 'Transform SQL to DAX_2.txt',
    type: 'file'
  },
    {
    id: 'pipelines4',
    name: 'Transform Cobol to Python',
    type: 'file'
  }
];



const fileStructureTarget: FileNode[] = [
  {
    id: 'main',
    name: 'src',
    type: 'folder',
    isExpanded: false,
    children: [
      { id: 'utils1', name: 'utils.py', type: 'file' },
      { id: 'transformer1', name: 'transformer.py', type: 'file' },
      { id: 'metrics1', name: 'metrics_engine.py', type: 'file' }
    ]
  },
  {
    id: 'pipelines',
    name: 'pipelines',
    type: 'folder',
    isExpanded: false,
    children: [
      { id: 'utils2', name: 'utils.py', type: 'file' },
      { id: 'transformer2', name: 'transformer.py', type: 'file' },
      { id: 'metrics2', name: 'metrics_engine.py', type: 'file' }
    ]
  },
];


export const FileExplorer: React.FC = observer(() => {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedProject, setSelectedProject] = useState('Healthify');
  const [sourceFiles, setSourceFiles] = useState(fileStructure);
  const [targetFiles, setTargetFiles] = useState(fileStructureTarget);

 const {
    fileContent,
    fileLoading,
    fetchFileContent
   }  = mainPageStore;
 

  const handleFileClick = (file: FileNode) => {
     console.log('click file: ',file.type);
     if (file.type === 'file') {
       fetchFileContent(file.id);
     }
   };


  const toggleFolder = (fileId: string, isSource: boolean) => {
    const updateFiles = (files: FileNode[]): FileNode[] => {
      return files.map(file => {
        if (file.id === fileId) {
          return { ...file, isExpanded: !file.isExpanded };
        }
        if (file.children) {
          return { ...file, children: updateFiles(file.children) };
        }
        return file;
      });
    };

    if (isSource) {
      setSourceFiles(updateFiles(sourceFiles));
    } else {
      setTargetFiles(updateFiles(targetFiles));
    }
  };



  return (
    <Paper 
      elevation={0}
      sx={{ 
        height: '100%',
        bgcolor: '#f5f5f5',
        border: '1px solid #e4e4e5',
        borderRadius: 1,
        p: 1
      }}
    >
      <FormControl fullWidth sx={{ mb: 1.5 }}>
        <Select
          value={selectedProject}
          onChange={(e) => setSelectedProject(e.target.value)}
          size="small"
          sx={{ 
            bgcolor: 'white',
            fontSize: '14px',
            '& .MuiOutlinedInput-notchedOutline': {
              borderColor: '#000'
            }
          }}
        >
          <MenuItem value="Healthify">Healthify</MenuItem>
          <MenuItem value="Project2">Project2</MenuItem>
        </Select>
      </FormControl>
      
      <TextField
        fullWidth
        size="small"
        placeholder="Search file"
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
        InputProps={{
          startAdornment: <SearchIcon sx={{ color: '#9e9e9e', mr: 1, fontSize: 18 }} />,
          sx: { bgcolor: 'white', fontSize: '14px' }
        }}
        sx={{ mb: 1 }}
      />
      
      <Paper elevation={0} sx={{ bgcolor: 'white', borderRadius: 1 }}>
        <Box sx={{ p: 1.5 }}>
          <Typography variant="subtitle2" sx={{ fontWeight: 600, mb: 1, fontSize: '14px' }}>
            Source Project
          </Typography>
          <Box sx={{ pl: 0.5 }}>
            {sourceFiles.map((file) => (
              <FileTreeItem
                key={file.id}
                file={file}
                level={0}
                onToggle={(id) => toggleFolder(id, true)}
                onFileClick={handleFileClick}
              />
            ))}
          </Box>
        </Box>
        
        <Box sx={{ p: 1.5, borderTop: '1px solid #f0f0f0' }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 1 }}>
            <Typography variant="subtitle2" sx={{ fontWeight: 600, fontSize: '14px' }}>
              Target Project
            </Typography>
            <Box>
              <IconButton size="small" sx={{ p: 0.5 }}>
                <RefreshIcon sx={{ fontSize: 18 }} />
              </IconButton>
              <IconButton size="small" sx={{ p: 0.5, ml: 0.5 }}>
                <img
                  src="https://cdn.builder.io/api/v1/image/assets/b22a1f591db946d8a5b6fadc33b7c231/35cda96b6e486815373828edb5e390edf7a96e59?placeholderIfAbsent=true"
                  style={{ width: 18, height: 18 }}
                  alt="Settings"
                />
              </IconButton>
            </Box>
          </Box>
          <Box sx={{ pl: 0.5 }}>
            {targetFiles.map((file) => (
              <FileTreeItem
                key={file.id}
                file={file}
                level={0}
                onToggle={(id) => toggleFolder(id, false)}
              />
            ))}
          </Box>
        </Box>
      </Paper>
    </Paper>
  );
});
